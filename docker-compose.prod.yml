services:
  postgres:
    image: postgres:15-alpine
    container_name: trading_bot_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-trading_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_strong_password}
      POSTGRES_DB: ${POSTGRES_DB:-trading_bot}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - trading_bot_network
    restart: unless-stopped

  redis:
    image: redis:6.2-alpine
    container_name: trading_bot_redis_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
      start_period: 10s
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_bot_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: trading_bot_rabbitmq_prod
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - trading_bot_network
    restart: unless-stopped

  backend:
    image: registry.digitalocean.com/${DIGITALOCEAN_REGISTRY}/automatedtradingbot-backend:latest
    container_name: trading_bot_backend_prod
    command: /bin/bash -c "/app/scripts/wait-for-it.sh redis 6379 && /app/run-migrations.sh && uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./data:/app/data
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - trading_bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  celery_worker:
    image: registry.digitalocean.com/${DIGITALOCEAN_REGISTRY}/automatedtradingbot-backend:latest
    container_name: trading_bot_celery_worker_prod
    command: /bin/bash -c "/app/scripts/wait-for-it.sh redis 6379 && celery -A app.core.celery.celery_app worker -l info --concurrency=4"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - trading_bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  celery_beat:
    image: registry.digitalocean.com/${DIGITALOCEAN_REGISTRY}/automatedtradingbot-backend:latest
    container_name: trading_bot_celery_beat_prod
    command: /bin/bash -c "/app/scripts/wait-for-it.sh redis 6379 && celery -A app.core.celery.celery_app beat -l info --scheduler redbeat.RedBeatScheduler"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - trading_bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo 'celery beat is running'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    image: registry.digitalocean.com/${DIGITALOCEAN_REGISTRY}/automatedtradingbot-frontend:latest
    container_name: trading_bot_frontend_prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - HOSTNAME=0.0.0.0
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - trading_bot_network
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nginx:
    image: nginx:alpine
    container_name: trading_bot_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - trading_bot_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  trading_bot_network:
    driver: bridge 